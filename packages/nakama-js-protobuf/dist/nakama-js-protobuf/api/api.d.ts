import _m0 from "protobufjs/minimal";
export declare const protobufPackage = "nakama.api";
/** The Nakama server RPC protocol for games and apps. */
/** Operator that can be used to override the one set in the leaderboard. */
export declare enum Operator {
    /** NO_OVERRIDE - Do not override the leaderboard operator. */
    NO_OVERRIDE = 0,
    /** BEST - Override the leaderboard operator with BEST. */
    BEST = 1,
    /** SET - Override the leaderboard operator with SET. */
    SET = 2,
    /** INCREMENT - Override the leaderboard operator with INCREMENT. */
    INCREMENT = 3,
    /** DECREMENT - Override the leaderboard operator with DECREMENT. */
    DECREMENT = 4,
    UNRECOGNIZED = -1
}
export declare function operatorFromJSON(object: any): Operator;
export declare function operatorToJSON(object: Operator): string;
/** A user with additional account details. Always the current user. */
export interface Account {
    /** The user object. */
    user: User | undefined;
    /** The user's wallet data. */
    wallet: string;
    /** The email address of the user. */
    email: string;
    /** The devices which belong to the user's account. */
    devices: AccountDevice[];
    /** The custom id in the user's account. */
    custom_id: string;
    /** The UNIX time when the user's email was verified. */
    verify_time: Date | undefined;
    /** The UNIX time when the user's account was disabled/banned. */
    disable_time: Date | undefined;
}
/** Obtain a new authentication token using a refresh token. */
export interface AccountRefresh {
    /** Refresh token. */
    token: string;
    /** Extra information that will be bundled in the session token. */
    vars: {
        [key: string]: string;
    };
}
export interface AccountRefresh_VarsEntry {
    key: string;
    value: string;
}
/** Send a Apple Sign In token to the server. Used with authenticate/link/unlink. */
export interface AccountApple {
    /** The ID token received from Apple to validate. */
    token: string;
    /** Extra information that will be bundled in the session token. */
    vars: {
        [key: string]: string;
    };
}
export interface AccountApple_VarsEntry {
    key: string;
    value: string;
}
/** Send a custom ID to the server. Used with authenticate/link/unlink. */
export interface AccountCustom {
    /** A custom identifier. */
    id: string;
    /** Extra information that will be bundled in the session token. */
    vars: {
        [key: string]: string;
    };
}
export interface AccountCustom_VarsEntry {
    key: string;
    value: string;
}
/** Send a device to the server. Used with authenticate/link/unlink and user. */
export interface AccountDevice {
    /** A device identifier. Should be obtained by a platform-specific device API. */
    id: string;
    /** Extra information that will be bundled in the session token. */
    vars: {
        [key: string]: string;
    };
}
export interface AccountDevice_VarsEntry {
    key: string;
    value: string;
}
/** Send an email with password to the server. Used with authenticate/link/unlink. */
export interface AccountEmail {
    /** A valid RFC-5322 email address. */
    email: string;
    /** A password for the user account. */
    password: string;
    /** Extra information that will be bundled in the session token. */
    vars: {
        [key: string]: string;
    };
}
export interface AccountEmail_VarsEntry {
    key: string;
    value: string;
}
/** Send a Facebook token to the server. Used with authenticate/link/unlink. */
export interface AccountFacebook {
    /** The OAuth token received from Facebook to access their profile API. */
    token: string;
    /** Extra information that will be bundled in the session token. */
    vars: {
        [key: string]: string;
    };
}
export interface AccountFacebook_VarsEntry {
    key: string;
    value: string;
}
/** Send a Facebook Instant Game token to the server. Used with authenticate/link/unlink. */
export interface AccountFacebookInstantGame {
    /** The OAuth token received from a Facebook Instant Game that may be decoded with the Application Secret (must be available with the nakama configuration) */
    signed_player_info: string;
    /** Extra information that will be bundled in the session token. */
    vars: {
        [key: string]: string;
    };
}
export interface AccountFacebookInstantGame_VarsEntry {
    key: string;
    value: string;
}
/** Send Apple's Game Center account credentials to the server. Used with authenticate/link/unlink. */
export interface AccountGameCenter {
    /** Player ID (generated by GameCenter). */
    player_id: string;
    /** Bundle ID (generated by GameCenter). */
    bundle_id: string;
    /** Time since UNIX epoch when the signature was created. */
    timestamp_seconds: number;
    /** A random "NSString" used to compute the hash and keep it randomized. */
    salt: string;
    /** The verification signature data generated. */
    signature: string;
    /** The URL for the public encryption key. */
    public_key_url: string;
    /** Extra information that will be bundled in the session token. */
    vars: {
        [key: string]: string;
    };
}
export interface AccountGameCenter_VarsEntry {
    key: string;
    value: string;
}
/** Send a Google token to the server. Used with authenticate/link/unlink. */
export interface AccountGoogle {
    /** The OAuth token received from Google to access their profile API. */
    token: string;
    /** Extra information that will be bundled in the session token. */
    vars: {
        [key: string]: string;
    };
}
export interface AccountGoogle_VarsEntry {
    key: string;
    value: string;
}
/** Send a Steam token to the server. Used with authenticate/link/unlink. */
export interface AccountSteam {
    /** The account token received from Steam to access their profile API. */
    token: string;
    /** Extra information that will be bundled in the session token. */
    vars: {
        [key: string]: string;
    };
}
export interface AccountSteam_VarsEntry {
    key: string;
    value: string;
}
/** Add one or more friends to the current user. */
export interface AddFriendsRequest {
    /** The account id of a user. */
    ids: string[];
    /** The account username of a user. */
    usernames: string[];
}
/** Add users to a group. */
export interface AddGroupUsersRequest {
    /** The group to add users to. */
    group_id: string;
    /** The users to add. */
    user_ids: string[];
}
/** Authenticate against the server with a refresh token. */
export interface SessionRefreshRequest {
    /** Refresh token. */
    token: string;
    /** Extra information that will be bundled in the session token. */
    vars: {
        [key: string]: string;
    };
}
export interface SessionRefreshRequest_VarsEntry {
    key: string;
    value: string;
}
/** Log out a session, invalidate a refresh token, or log out all sessions/refresh tokens for a user. */
export interface SessionLogoutRequest {
    /** Session token to log out. */
    token: string;
    /** Refresh token to invalidate. */
    refresh_token: string;
}
/** Authenticate against the server with Apple Sign In. */
export interface AuthenticateAppleRequest {
    /** The Apple account details. */
    account: AccountApple | undefined;
    /** Register the account if the user does not already exist. */
    create: boolean | undefined;
    /** Set the username on the account at register. Must be unique. */
    username: string;
}
/** Authenticate against the server with a custom ID. */
export interface AuthenticateCustomRequest {
    /** The custom account details. */
    account: AccountCustom | undefined;
    /** Register the account if the user does not already exist. */
    create: boolean | undefined;
    /** Set the username on the account at register. Must be unique. */
    username: string;
}
/** Authenticate against the server with a device ID. */
export interface AuthenticateDeviceRequest {
    /** The device account details. */
    account: AccountDevice | undefined;
    /** Register the account if the user does not already exist. */
    create: boolean | undefined;
    /** Set the username on the account at register. Must be unique. */
    username: string;
}
/** Authenticate against the server with email+password. */
export interface AuthenticateEmailRequest {
    /** The email account details. */
    account: AccountEmail | undefined;
    /** Register the account if the user does not already exist. */
    create: boolean | undefined;
    /** Set the username on the account at register. Must be unique. */
    username: string;
}
/** Authenticate against the server with Facebook. */
export interface AuthenticateFacebookRequest {
    /** The Facebook account details. */
    account: AccountFacebook | undefined;
    /** Register the account if the user does not already exist. */
    create: boolean | undefined;
    /** Set the username on the account at register. Must be unique. */
    username: string;
    /** Import Facebook friends for the user. */
    sync: boolean | undefined;
}
/** Authenticate against the server with Facebook Instant Game token. */
export interface AuthenticateFacebookInstantGameRequest {
    /** The Facebook Instant Game account details. */
    account: AccountFacebookInstantGame | undefined;
    /** Register the account if the user does not already exist. */
    create: boolean | undefined;
    /** Set the username on the account at register. Must be unique. */
    username: string;
}
/** Authenticate against the server with Apple's Game Center. */
export interface AuthenticateGameCenterRequest {
    /** The Game Center account details. */
    account: AccountGameCenter | undefined;
    /** Register the account if the user does not already exist. */
    create: boolean | undefined;
    /** Set the username on the account at register. Must be unique. */
    username: string;
}
/** Authenticate against the server with Google. */
export interface AuthenticateGoogleRequest {
    /** The Google account details. */
    account: AccountGoogle | undefined;
    /** Register the account if the user does not already exist. */
    create: boolean | undefined;
    /** Set the username on the account at register. Must be unique. */
    username: string;
}
/** Authenticate against the server with Steam. */
export interface AuthenticateSteamRequest {
    /** The Steam account details. */
    account: AccountSteam | undefined;
    /** Register the account if the user does not already exist. */
    create: boolean | undefined;
    /** Set the username on the account at register. Must be unique. */
    username: string;
    /** Import Steam friends for the user. */
    sync: boolean | undefined;
}
/** Ban users from a group. */
export interface BanGroupUsersRequest {
    /** The group to ban users from. */
    group_id: string;
    /** The users to ban. */
    user_ids: string[];
}
/** Block one or more friends for the current user. */
export interface BlockFriendsRequest {
    /** The account id of a user. */
    ids: string[];
    /** The account username of a user. */
    usernames: string[];
}
/** A message sent on a channel. */
export interface ChannelMessage {
    /** The channel this message belongs to. */
    channel_id: string;
    /** The unique ID of this message. */
    message_id: string;
    /** The code representing a message type or category. */
    code: number | undefined;
    /** Message sender, usually a user ID. */
    sender_id: string;
    /** The username of the message sender, if any. */
    username: string;
    /** The content payload. */
    content: string;
    /** The UNIX time when the message was created. */
    create_time: Date | undefined;
    /** The UNIX time when the message was last updated. */
    update_time: Date | undefined;
    /** True if the message was persisted to the channel's history, false otherwise. */
    persistent: boolean | undefined;
    /** The name of the chat room, or an empty string if this message was not sent through a chat room. */
    room_name: string;
    /** The ID of the group, or an empty string if this message was not sent through a group channel. */
    group_id: string;
    /** The ID of the first DM user, or an empty string if this message was not sent through a DM chat. */
    user_id_one: string;
    /** The ID of the second DM user, or an empty string if this message was not sent through a DM chat. */
    user_id_two: string;
}
/** A list of channel messages, usually a result of a list operation. */
export interface ChannelMessageList {
    /** A list of messages. */
    messages: ChannelMessage[];
    /** The cursor to send when retrieving the next page, if any. */
    next_cursor: string;
    /** The cursor to send when retrieving the previous page, if any. */
    prev_cursor: string;
    /** Cacheable cursor to list newer messages. Durable and designed to be stored, unlike next/prev cursors. */
    cacheable_cursor: string;
}
/** Create a group with the current user as owner. */
export interface CreateGroupRequest {
    /** A unique name for the group. */
    name: string;
    /** A description for the group. */
    description: string;
    /** The language expected to be a tag which follows the BCP-47 spec. */
    lang_tag: string;
    /** A URL for an avatar image. */
    avatar_url: string;
    /** Mark a group as open or not where only admins can accept members. */
    open: boolean;
    /** Maximum number of group members. */
    max_count: number;
}
/** Delete one or more friends for the current user. */
export interface DeleteFriendsRequest {
    /** The account id of a user. */
    ids: string[];
    /** The account username of a user. */
    usernames: string[];
}
/** Delete a group the user has access to. */
export interface DeleteGroupRequest {
    /** The id of a group. */
    group_id: string;
}
/** Delete a leaderboard record. */
export interface DeleteLeaderboardRecordRequest {
    /** The leaderboard ID to delete from. */
    leaderboard_id: string;
}
/** Delete one or more notifications for the current user. */
export interface DeleteNotificationsRequest {
    /** The id of notifications. */
    ids: string[];
}
/** Storage objects to delete. */
export interface DeleteStorageObjectId {
    /** The collection which stores the object. */
    collection: string;
    /** The key of the object within the collection. */
    key: string;
    /** The version hash of the object. */
    version: string;
}
/** Batch delete storage objects. */
export interface DeleteStorageObjectsRequest {
    /** Batch of storage objects. */
    object_ids: DeleteStorageObjectId[];
}
/** Represents an event to be passed through the server to registered event handlers. */
export interface Event {
    /** An event name, type, category, or identifier. */
    name: string;
    /** Arbitrary event property values. */
    properties: {
        [key: string]: string;
    };
    /** The time when the event was triggered. */
    timestamp: Date | undefined;
    /** True if the event came directly from a client call, false otherwise. */
    external: boolean;
}
export interface Event_PropertiesEntry {
    key: string;
    value: string;
}
/** A friend of a user. */
export interface Friend {
    /** The user object. */
    user: User | undefined;
    /** The friend status. */
    state: number | undefined;
    /** Time of the latest relationship update. */
    update_time: Date | undefined;
}
/** The friendship status. */
export declare enum Friend_State {
    /** FRIEND - The user is a friend of the current user. */
    FRIEND = 0,
    /** INVITE_SENT - The current user has sent an invite to the user. */
    INVITE_SENT = 1,
    /** INVITE_RECEIVED - The current user has received an invite from this user. */
    INVITE_RECEIVED = 2,
    /** BLOCKED - The current user has blocked this user. */
    BLOCKED = 3,
    UNRECOGNIZED = -1
}
export declare function friend_StateFromJSON(object: any): Friend_State;
export declare function friend_StateToJSON(object: Friend_State): string;
/** A collection of zero or more friends of the user. */
export interface FriendList {
    /** The Friend objects. */
    friends: Friend[];
    /** Cursor for the next page of results, if any. */
    cursor: string;
}
/** Fetch a batch of zero or more users from the server. */
export interface GetUsersRequest {
    /** The account id of a user. */
    ids: string[];
    /** The account username of a user. */
    usernames: string[];
    /** The Facebook ID of a user. */
    facebook_ids: string[];
}
/** A group in the server. */
export interface Group {
    /** The id of a group. */
    id: string;
    /** The id of the user who created the group. */
    creator_id: string;
    /** The unique name of the group. */
    name: string;
    /** A description for the group. */
    description: string;
    /** The language expected to be a tag which follows the BCP-47 spec. */
    lang_tag: string;
    /** Additional information stored as a JSON object. */
    metadata: string;
    /** A URL for an avatar image. */
    avatar_url: string;
    /** Anyone can join open groups, otherwise only admins can accept members. */
    open: boolean | undefined;
    /** The current count of all members in the group. */
    edge_count: number;
    /** The maximum number of members allowed. */
    max_count: number;
    /** The UNIX time when the group was created. */
    create_time: Date | undefined;
    /** The UNIX time when the group was last updated. */
    update_time: Date | undefined;
}
/** One or more groups returned from a listing operation. */
export interface GroupList {
    /** One or more groups. */
    groups: Group[];
    /** A cursor used to get the next page. */
    cursor: string;
}
/** A list of users belonging to a group, along with their role. */
export interface GroupUserList {
    /** User-role pairs for a group. */
    group_users: GroupUserList_GroupUser[];
    /** Cursor for the next page of results, if any. */
    cursor: string;
}
/** A single user-role pair. */
export interface GroupUserList_GroupUser {
    /** User. */
    user: User | undefined;
    /** Their relationship to the group. */
    state: number | undefined;
}
/** The group role status. */
export declare enum GroupUserList_GroupUser_State {
    /** SUPERADMIN - The user is a superadmin with full control of the group. */
    SUPERADMIN = 0,
    /** ADMIN - The user is an admin with additional privileges. */
    ADMIN = 1,
    /** MEMBER - The user is a regular member. */
    MEMBER = 2,
    /** JOIN_REQUEST - The user has requested to join the group */
    JOIN_REQUEST = 3,
    UNRECOGNIZED = -1
}
export declare function groupUserList_GroupUser_StateFromJSON(object: any): GroupUserList_GroupUser_State;
export declare function groupUserList_GroupUser_StateToJSON(object: GroupUserList_GroupUser_State): string;
/** Import Facebook friends into the current user's account. */
export interface ImportFacebookFriendsRequest {
    /** The Facebook account details. */
    account: AccountFacebook | undefined;
    /** Reset the current user's friends list. */
    reset: boolean | undefined;
}
/** Import Facebook friends into the current user's account. */
export interface ImportSteamFriendsRequest {
    /** The Facebook account details. */
    account: AccountSteam | undefined;
    /** Reset the current user's friends list. */
    reset: boolean | undefined;
}
/** Immediately join an open group, or request to join a closed one. */
export interface JoinGroupRequest {
    /** The group ID to join. The group must already exist. */
    group_id: string;
}
/** The request to join a tournament. */
export interface JoinTournamentRequest {
    /** The ID of the tournament to join. The tournament must already exist. */
    tournament_id: string;
}
/** Kick a set of users from a group. */
export interface KickGroupUsersRequest {
    /** The group ID to kick from. */
    group_id: string;
    /** The users to kick. */
    user_ids: string[];
}
/** A leaderboard on the server. */
export interface Leaderboard {
    /** The ID of the leaderboard. */
    id: string;
    /** ASC(0) or DESC(1) sort mode of scores in the leaderboard. */
    sort_order: number;
    /** BEST, SET, INCREMENT or DECREMENT operator mode of the leaderboard. */
    operator: Operator;
    /** The UNIX time when the leaderboard was previously reset. A computed value. */
    prev_reset: number;
    /** The UNIX time when the leaderboard is next playable. A computed value. */
    next_reset: number;
    /** Additional information stored as a JSON object. */
    metadata: string;
    /** The UNIX time when the leaderboard was created. */
    create_time: Date | undefined;
    /** Wether the leaderboard was created authoritatively or not. */
    authoritative: boolean;
}
/** A list of leaderboards */
export interface LeaderboardList {
    /** The list of leaderboards returned. */
    leaderboards: Leaderboard[];
    /** A pagination cursor (optional). */
    cursor: string;
}
/** Represents a complete leaderboard record with all scores and associated metadata. */
export interface LeaderboardRecord {
    /** The ID of the leaderboard this score belongs to. */
    leaderboard_id: string;
    /** The ID of the score owner, usually a user or group. */
    owner_id: string;
    /** The username of the score owner, if the owner is a user. */
    username: string | undefined;
    /** The score value. */
    score: number;
    /** An optional subscore value. */
    subscore: number;
    /** The number of submissions to this score record. */
    num_score: number;
    /** Metadata. */
    metadata: string;
    /** The UNIX time when the leaderboard record was created. */
    create_time: Date | undefined;
    /** The UNIX time when the leaderboard record was updated. */
    update_time: Date | undefined;
    /** The UNIX time when the leaderboard record expires. */
    expiry_time: Date | undefined;
    /** The rank of this record. */
    rank: number;
    /** The maximum number of score updates allowed by the owner. */
    max_num_score: number;
}
/** A set of leaderboard records, may be part of a leaderboard records page or a batch of individual records. */
export interface LeaderboardRecordList {
    /** A list of leaderboard records. */
    records: LeaderboardRecord[];
    /** A batched set of leaderboard records belonging to specified owners. */
    owner_records: LeaderboardRecord[];
    /** The cursor to send when retrieving the next page, if any. */
    next_cursor: string;
    /** The cursor to send when retrieving the previous page, if any. */
    prev_cursor: string;
}
/** Leave a group. */
export interface LeaveGroupRequest {
    /** The group ID to leave. */
    group_id: string;
}
/** Link Facebook to the current user's account. */
export interface LinkFacebookRequest {
    /** The Facebook account details. */
    account: AccountFacebook | undefined;
    /** Import Facebook friends for the user. */
    sync: boolean | undefined;
}
/** Link Steam to the current user's account. */
export interface LinkSteamRequest {
    /** The Facebook account details. */
    account: AccountSteam | undefined;
    /** Import Steam friends for the user. */
    sync: boolean | undefined;
}
/** List a channel's message history. */
export interface ListChannelMessagesRequest {
    /** The channel ID to list from. */
    channel_id: string;
    /** Max number of records to return. Between 1 and 100. */
    limit: number | undefined;
    /** True if listing should be older messages to newer, false if reverse. */
    forward: boolean | undefined;
    /** A pagination cursor, if any. */
    cursor: string;
}
/** List friends for a user. */
export interface ListFriendsRequest {
    /** Max number of records to return. Between 1 and 100. */
    limit: number | undefined;
    /** The friend state to list. */
    state: number | undefined;
    /** An optional next page cursor. */
    cursor: string;
}
/** List groups based on given filters. */
export interface ListGroupsRequest {
    /** List groups that contain this value in their names. */
    name: string;
    /** Optional pagination cursor. */
    cursor: string;
    /** Max number of groups to return. Between 1 and 100. */
    limit: number | undefined;
    /** Language tag filter */
    lang_tag: string;
    /** Number of group members */
    members: number | undefined;
    /** Optional Open/Closed filter. */
    open: boolean | undefined;
}
/** List all users that are part of a group. */
export interface ListGroupUsersRequest {
    /** The group ID to list from. */
    group_id: string;
    /** Max number of records to return. Between 1 and 100. */
    limit: number | undefined;
    /** The group user state to list. */
    state: number | undefined;
    /** An optional next page cursor. */
    cursor: string;
}
/** List leaerboard records from a given leaderboard around the owner. */
export interface ListLeaderboardRecordsAroundOwnerRequest {
    /** The ID of the tournament to list for. */
    leaderboard_id: string;
    /** Max number of records to return. Between 1 and 100. */
    limit: number | undefined;
    /** The owner to retrieve records around. */
    owner_id: string;
    /** Expiry in seconds (since epoch) to begin fetching records from. */
    expiry: number | undefined;
}
/** List leaderboard records from a given leaderboard. */
export interface ListLeaderboardRecordsRequest {
    /** The ID of the leaderboard to list for. */
    leaderboard_id: string;
    /** One or more owners to retrieve records for. */
    owner_ids: string[];
    /** Max number of records to return. Between 1 and 100. */
    limit: number | undefined;
    /** A next or previous page cursor. */
    cursor: string;
    /** Expiry in seconds (since epoch) to begin fetching records from. Optional. 0 means from current time. */
    expiry: number | undefined;
}
/** List realtime matches. */
export interface ListMatchesRequest {
    /** Limit the number of returned matches. */
    limit: number | undefined;
    /** Authoritative or relayed matches. */
    authoritative: boolean | undefined;
    /** Label filter. */
    label: string | undefined;
    /** Minimum user count. */
    min_size: number | undefined;
    /** Maximum user count. */
    max_size: number | undefined;
    /** Arbitrary label query. */
    query: string | undefined;
}
/** Get a list of unexpired notifications. */
export interface ListNotificationsRequest {
    /** The number of notifications to get. Between 1 and 100. */
    limit: number | undefined;
    /** A cursor to page through notifications. May be cached by clients to get from point in time forwards. */
    cacheable_cursor: string;
}
/** List publicly readable storage objects in a given collection. */
export interface ListStorageObjectsRequest {
    /** ID of the user. */
    user_id: string;
    /** The collection which stores the object. */
    collection: string;
    /** The number of storage objects to list. Between 1 and 100. */
    limit: number | undefined;
    /** The cursor to page through results from. */
    cursor: string;
}
/** List tournament records from a given tournament around the owner. */
export interface ListTournamentRecordsAroundOwnerRequest {
    /** The ID of the tournament to list for. */
    tournament_id: string;
    /** Max number of records to return. Between 1 and 100. */
    limit: number | undefined;
    /** The owner to retrieve records around. */
    owner_id: string;
    /** Expiry in seconds (since epoch) to begin fetching records from. */
    expiry: number | undefined;
}
/** List tournament records from a given tournament. */
export interface ListTournamentRecordsRequest {
    /** The ID of the tournament to list for. */
    tournament_id: string;
    /** One or more owners to retrieve records for. */
    owner_ids: string[];
    /** Max number of records to return. Between 1 and 100. */
    limit: number | undefined;
    /** A next or previous page cursor. */
    cursor: string;
    /** Expiry in seconds (since epoch) to begin fetching records from. */
    expiry: number | undefined;
}
/** List active/upcoming tournaments based on given filters. */
export interface ListTournamentsRequest {
    /** The start of the categories to include. Defaults to 0. */
    category_start: number | undefined;
    /** The end of the categories to include. Defaults to 128. */
    category_end: number | undefined;
    /** The start time for tournaments. Defaults to epoch. */
    start_time: number | undefined;
    /** The end time for tournaments. Defaults to +1 year from current Unix time. */
    end_time: number | undefined;
    /** Max number of records to return. Between 1 and 100. */
    limit: number | undefined;
    /** A next page cursor for listings (optional). */
    cursor: string;
}
/** List the groups a user is part of, and their relationship to each. */
export interface ListUserGroupsRequest {
    /** ID of the user. */
    user_id: string;
    /** Max number of records to return. Between 1 and 100. */
    limit: number | undefined;
    /** The user group state to list. */
    state: number | undefined;
    /** An optional next page cursor. */
    cursor: string;
}
/** Represents a realtime match. */
export interface Match {
    /** The ID of the match, can be used to join. */
    match_id: string;
    /** True if it's an server-managed authoritative match, false otherwise. */
    authoritative: boolean;
    /** Match label, if any. */
    label: string | undefined;
    /** Current number of users in the match. */
    size: number;
    /** Tick Rate */
    tick_rate: number;
    /** Handler name */
    handler_name: string;
}
/** A list of realtime matches. */
export interface MatchList {
    /** A number of matches corresponding to a list operation. */
    matches: Match[];
}
/** A notification in the server. */
export interface Notification {
    /** ID of the Notification. */
    id: string;
    /** Subject of the notification. */
    subject: string;
    /** Content of the notification in JSON. */
    content: string;
    /** Category code for this notification. */
    code: number;
    /** ID of the sender, if a user. Otherwise 'null'. */
    sender_id: string;
    /** The UNIX time when the notification was created. */
    create_time: Date | undefined;
    /** True if this notification was persisted to the database. */
    persistent: boolean;
}
/** A collection of zero or more notifications. */
export interface NotificationList {
    /** Collection of notifications. */
    notifications: Notification[];
    /** Use this cursor to paginate notifications. Cache this to catch up to new notifications. */
    cacheable_cursor: string;
}
/** Promote a set of users in a group to the next role up. */
export interface PromoteGroupUsersRequest {
    /** The group ID to promote in. */
    group_id: string;
    /** The users to promote. */
    user_ids: string[];
}
/** Demote a set of users in a group to the next role down. */
export interface DemoteGroupUsersRequest {
    /** The group ID to demote in. */
    group_id: string;
    /** The users to demote. */
    user_ids: string[];
}
/** Storage objects to get. */
export interface ReadStorageObjectId {
    /** The collection which stores the object. */
    collection: string;
    /** The key of the object within the collection. */
    key: string;
    /** The user owner of the object. */
    user_id: string;
}
/** Batch get storage objects. */
export interface ReadStorageObjectsRequest {
    /** Batch of storage objects. */
    object_ids: ReadStorageObjectId[];
}
/** Execute an Lua function on the server. */
export interface Rpc {
    /** The identifier of the function. */
    id: string;
    /** The payload of the function which must be a JSON object. */
    payload: string;
    /** The authentication key used when executed as a non-client HTTP request. */
    http_key: string;
}
/** A user's session used to authenticate messages. */
export interface Session {
    /** True if the corresponding account was just created, false otherwise. */
    created: boolean;
    /** Authentication credentials. */
    token: string;
    /** Refresh token that can be used for session token renewal. */
    refresh_token: string;
}
/** An object within the storage engine. */
export interface StorageObject {
    /** The collection which stores the object. */
    collection: string;
    /** The key of the object within the collection. */
    key: string;
    /** The user owner of the object. */
    user_id: string;
    /** The value of the object. */
    value: string;
    /** The version hash of the object. */
    version: string;
    /** The read access permissions for the object. */
    permission_read: number;
    /** The write access permissions for the object. */
    permission_write: number;
    /** The UNIX time when the object was created. */
    create_time: Date | undefined;
    /** The UNIX time when the object was last updated. */
    update_time: Date | undefined;
}
/** A storage acknowledgement. */
export interface StorageObjectAck {
    /** The collection which stores the object. */
    collection: string;
    /** The key of the object within the collection. */
    key: string;
    /** The version hash of the object. */
    version: string;
    /** The owner of the object. */
    user_id: string;
}
/** Batch of acknowledgements for the storage object write. */
export interface StorageObjectAcks {
    /** Batch of storage write acknowledgements. */
    acks: StorageObjectAck[];
}
/** Batch of storage objects. */
export interface StorageObjects {
    /** The batch of storage objects. */
    objects: StorageObject[];
}
/** List of storage objects. */
export interface StorageObjectList {
    /** The list of storage objects. */
    objects: StorageObject[];
    /** The cursor for the next page of results, if any. */
    cursor: string;
}
/** A tournament on the server. */
export interface Tournament {
    /** The ID of the tournament. */
    id: string;
    /** The title for the tournament. */
    title: string;
    /** The description of the tournament. May be blank. */
    description: string;
    /** The category of the tournament. e.g. "vip" could be category 1. */
    category: number;
    /** ASC (0) or DESC (1) sort mode of scores in the tournament. */
    sort_order: number;
    /** The current number of players in the tournament. */
    size: number;
    /** The maximum number of players for the tournament. */
    max_size: number;
    /** The maximum score updates allowed per player for the current tournament. */
    max_num_score: number;
    /** True if the tournament is active and can enter. A computed value. */
    can_enter: boolean;
    /** The UNIX time when the tournament stops being active until next reset. A computed value. */
    end_active: number;
    /** The UNIX time when the tournament is next playable. A computed value. */
    next_reset: number;
    /** Additional information stored as a JSON object. */
    metadata: string;
    /** The UNIX time when the tournament was created. */
    create_time: Date | undefined;
    /** The UNIX time when the tournament will start. */
    start_time: Date | undefined;
    /** The UNIX time when the tournament will be stopped. */
    end_time: Date | undefined;
    /** Duration of the tournament in seconds. */
    duration: number;
    /** The UNIX time when the tournament start being active. A computed value. */
    start_active: number;
    /** The UNIX time when the tournament was last reset. A computed value. */
    prev_reset: number;
    /** Operator. */
    operator: Operator;
}
/** A list of tournaments. */
export interface TournamentList {
    /** The list of tournaments returned. */
    tournaments: Tournament[];
    /** A pagination cursor (optional). */
    cursor: string;
}
/** A set of tournament records which may be part of a tournament records page or a batch of individual records. */
export interface TournamentRecordList {
    /** A list of tournament records. */
    records: LeaderboardRecord[];
    /** A batched set of tournament records belonging to specified owners. */
    owner_records: LeaderboardRecord[];
    /** The cursor to send when retireving the next page (optional). */
    next_cursor: string;
    /** The cursor to send when retrieving the previous page (optional). */
    prev_cursor: string;
}
/** Update a user's account details. */
export interface UpdateAccountRequest {
    /** The username of the user's account. */
    username: string | undefined;
    /** The display name of the user. */
    display_name: string | undefined;
    /** A URL for an avatar image. */
    avatar_url: string | undefined;
    /** The language expected to be a tag which follows the BCP-47 spec. */
    lang_tag: string | undefined;
    /** The location set by the user. */
    location: string | undefined;
    /** The timezone set by the user. */
    timezone: string | undefined;
}
/** Update fields in a given group. */
export interface UpdateGroupRequest {
    /** The ID of the group to update. */
    group_id: string;
    /** Name. */
    name: string | undefined;
    /** Description string. */
    description: string | undefined;
    /** Lang tag. */
    lang_tag: string | undefined;
    /** Avatar URL. */
    avatar_url: string | undefined;
    /** Open is true if anyone should be allowed to join, or false if joins must be approved by a group admin. */
    open: boolean | undefined;
}
/** A user in the server. */
export interface User {
    /** The id of the user's account. */
    id: string;
    /** The username of the user's account. */
    username: string;
    /** The display name of the user. */
    display_name: string;
    /** A URL for an avatar image. */
    avatar_url: string;
    /** The language expected to be a tag which follows the BCP-47 spec. */
    lang_tag: string;
    /** The location set by the user. */
    location: string;
    /** The timezone set by the user. */
    timezone: string;
    /** Additional information stored as a JSON object. */
    metadata: string;
    /** The Facebook id in the user's account. */
    facebook_id: string;
    /** The Google id in the user's account. */
    google_id: string;
    /** The Apple Game Center in of the user's account. */
    gamecenter_id: string;
    /** The Steam id in the user's account. */
    steam_id: string;
    /** Indicates whether the user is currently online. */
    online: boolean;
    /** Number of related edges to this user. */
    edge_count: number;
    /** The UNIX time when the user was created. */
    create_time: Date | undefined;
    /** The UNIX time when the user was last updated. */
    update_time: Date | undefined;
    /** The Facebook Instant Game ID in the user's account. */
    facebook_instant_game_id: string;
    /** The Apple Sign In ID in the user's account. */
    apple_id: string;
}
/** A list of groups belonging to a user, along with the user's role in each group. */
export interface UserGroupList {
    /** Group-role pairs for a user. */
    user_groups: UserGroupList_UserGroup[];
    /** Cursor for the next page of results, if any. */
    cursor: string;
}
/** A single group-role pair. */
export interface UserGroupList_UserGroup {
    /** Group. */
    group: Group | undefined;
    /** The user's relationship to the group. */
    state: number | undefined;
}
/** The group role status. */
export declare enum UserGroupList_UserGroup_State {
    /** SUPERADMIN - The user is a superadmin with full control of the group. */
    SUPERADMIN = 0,
    /** ADMIN - The user is an admin with additional privileges. */
    ADMIN = 1,
    /** MEMBER - The user is a regular member. */
    MEMBER = 2,
    /** JOIN_REQUEST - The user has requested to join the group */
    JOIN_REQUEST = 3,
    UNRECOGNIZED = -1
}
export declare function userGroupList_UserGroup_StateFromJSON(object: any): UserGroupList_UserGroup_State;
export declare function userGroupList_UserGroup_StateToJSON(object: UserGroupList_UserGroup_State): string;
/** A collection of zero or more users. */
export interface Users {
    /** The User objects. */
    users: User[];
}
/** Apple IAP Purchases validation request */
export interface ValidatePurchaseAppleRequest {
    /** Base64 encoded Apple receipt data payload. */
    receipt: string;
}
/** Google IAP Purchase validation request */
export interface ValidatePurchaseGoogleRequest {
    /** JSON encoded Google purchase payload. */
    purchase: string;
}
/** Huawei IAP Purchase validation request */
export interface ValidatePurchaseHuaweiRequest {
    /** JSON encoded Huawei InAppPurchaseData. */
    purchase: string;
    /** InAppPurchaseData signature. */
    signature: string;
}
/** Validated Purchase stored by Nakama. */
export interface ValidatedPurchase {
    /** Purchase Product ID. */
    product_id: string;
    /** Purchase Transaction ID. */
    transaction_id: string;
    /** Store identifier */
    store: ValidatedPurchase_Store;
    /** UNIX Timestamp when the purchase was done. */
    purchase_time: Date | undefined;
    /** UNIX Timestamp when the receipt validation was stored in DB. */
    create_time: Date | undefined;
    /** UNIX Timestamp when the receipt validation was updated in DB. */
    update_time: Date | undefined;
    /** Raw provider validation response. */
    provider_response: string;
    /** Whether the purchase was done in production or sandbox environment. */
    environment: ValidatedPurchase_Environment;
    /** Whether the purchase had already been validated by Nakama before. */
    seen_before: boolean;
}
/** Validation Provider */
export declare enum ValidatedPurchase_Store {
    /** APPLE_APP_STORE - Apple App Store */
    APPLE_APP_STORE = 0,
    /** GOOGLE_PLAY_STORE - Google Play Store */
    GOOGLE_PLAY_STORE = 1,
    /** HUAWEI_APP_GALLERY - Huawei App Gallery */
    HUAWEI_APP_GALLERY = 2,
    UNRECOGNIZED = -1
}
export declare function validatedPurchase_StoreFromJSON(object: any): ValidatedPurchase_Store;
export declare function validatedPurchase_StoreToJSON(object: ValidatedPurchase_Store): string;
/** Environment where the purchase took place */
export declare enum ValidatedPurchase_Environment {
    /** UNKNOWN - Unknown environment. */
    UNKNOWN = 0,
    /** SANDBOX - Sandbox/test environment. */
    SANDBOX = 1,
    /** PRODUCTION - Production environment. */
    PRODUCTION = 2,
    UNRECOGNIZED = -1
}
export declare function validatedPurchase_EnvironmentFromJSON(object: any): ValidatedPurchase_Environment;
export declare function validatedPurchase_EnvironmentToJSON(object: ValidatedPurchase_Environment): string;
/** Validate IAP response */
export interface ValidatePurchaseResponse {
    /** Newly seen validated purchases. */
    validated_purchases: ValidatedPurchase[];
}
/** A list of validated purchases stored by Nakama. */
export interface PurchaseList {
    /** Stored validated purchases. */
    validated_purchases: ValidatedPurchase[];
    /** The cursor to send when retrieving the next page, if any. */
    cursor: string;
}
/** A request to submit a score to a leaderboard. */
export interface WriteLeaderboardRecordRequest {
    /** The ID of the leaderboard to write to. */
    leaderboard_id: string;
    /** Record input. */
    record: WriteLeaderboardRecordRequest_LeaderboardRecordWrite | undefined;
}
/** Record values to write. */
export interface WriteLeaderboardRecordRequest_LeaderboardRecordWrite {
    /** The score value to submit. */
    score: number;
    /** An optional secondary value. */
    subscore: number;
    /** Optional record metadata. */
    metadata: string;
    /** Operator override. */
    operator: Operator;
}
/** The object to store. */
export interface WriteStorageObject {
    /** The collection to store the object. */
    collection: string;
    /** The key for the object within the collection. */
    key: string;
    /** The value of the object. */
    value: string;
    /** The version hash of the object to check. Possible values are: ["", "*", "#hash#"]. */
    version: string;
    /** The read access permissions for the object. */
    permission_read: number | undefined;
    /** The write access permissions for the object. */
    permission_write: number | undefined;
}
/** Write objects to the storage engine. */
export interface WriteStorageObjectsRequest {
    /** The objects to store on the server. */
    objects: WriteStorageObject[];
}
/** A request to submit a score to a tournament. */
export interface WriteTournamentRecordRequest {
    /** The tournament ID to write the record for. */
    tournament_id: string;
    /** Record input. */
    record: WriteTournamentRecordRequest_TournamentRecordWrite | undefined;
}
/** Record values to write. */
export interface WriteTournamentRecordRequest_TournamentRecordWrite {
    /** The score value to submit. */
    score: number;
    /** An optional secondary value. */
    subscore: number;
    /** A JSON object of additional properties (optional). */
    metadata: string;
    /** Operator override. */
    operator: Operator;
}
export declare const Account: {
    encode(message: Account, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): Account;
    fromJSON(object: any): Account;
    toJSON(message: Account): unknown;
    fromPartial(object: DeepPartial<Account>): Account;
};
export declare const AccountRefresh: {
    encode(message: AccountRefresh, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): AccountRefresh;
    fromJSON(object: any): AccountRefresh;
    toJSON(message: AccountRefresh): unknown;
    fromPartial(object: DeepPartial<AccountRefresh>): AccountRefresh;
};
export declare const AccountRefresh_VarsEntry: {
    encode(message: AccountRefresh_VarsEntry, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): AccountRefresh_VarsEntry;
    fromJSON(object: any): AccountRefresh_VarsEntry;
    toJSON(message: AccountRefresh_VarsEntry): unknown;
    fromPartial(object: DeepPartial<AccountRefresh_VarsEntry>): AccountRefresh_VarsEntry;
};
export declare const AccountApple: {
    encode(message: AccountApple, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): AccountApple;
    fromJSON(object: any): AccountApple;
    toJSON(message: AccountApple): unknown;
    fromPartial(object: DeepPartial<AccountApple>): AccountApple;
};
export declare const AccountApple_VarsEntry: {
    encode(message: AccountApple_VarsEntry, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): AccountApple_VarsEntry;
    fromJSON(object: any): AccountApple_VarsEntry;
    toJSON(message: AccountApple_VarsEntry): unknown;
    fromPartial(object: DeepPartial<AccountApple_VarsEntry>): AccountApple_VarsEntry;
};
export declare const AccountCustom: {
    encode(message: AccountCustom, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): AccountCustom;
    fromJSON(object: any): AccountCustom;
    toJSON(message: AccountCustom): unknown;
    fromPartial(object: DeepPartial<AccountCustom>): AccountCustom;
};
export declare const AccountCustom_VarsEntry: {
    encode(message: AccountCustom_VarsEntry, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): AccountCustom_VarsEntry;
    fromJSON(object: any): AccountCustom_VarsEntry;
    toJSON(message: AccountCustom_VarsEntry): unknown;
    fromPartial(object: DeepPartial<AccountCustom_VarsEntry>): AccountCustom_VarsEntry;
};
export declare const AccountDevice: {
    encode(message: AccountDevice, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): AccountDevice;
    fromJSON(object: any): AccountDevice;
    toJSON(message: AccountDevice): unknown;
    fromPartial(object: DeepPartial<AccountDevice>): AccountDevice;
};
export declare const AccountDevice_VarsEntry: {
    encode(message: AccountDevice_VarsEntry, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): AccountDevice_VarsEntry;
    fromJSON(object: any): AccountDevice_VarsEntry;
    toJSON(message: AccountDevice_VarsEntry): unknown;
    fromPartial(object: DeepPartial<AccountDevice_VarsEntry>): AccountDevice_VarsEntry;
};
export declare const AccountEmail: {
    encode(message: AccountEmail, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): AccountEmail;
    fromJSON(object: any): AccountEmail;
    toJSON(message: AccountEmail): unknown;
    fromPartial(object: DeepPartial<AccountEmail>): AccountEmail;
};
export declare const AccountEmail_VarsEntry: {
    encode(message: AccountEmail_VarsEntry, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): AccountEmail_VarsEntry;
    fromJSON(object: any): AccountEmail_VarsEntry;
    toJSON(message: AccountEmail_VarsEntry): unknown;
    fromPartial(object: DeepPartial<AccountEmail_VarsEntry>): AccountEmail_VarsEntry;
};
export declare const AccountFacebook: {
    encode(message: AccountFacebook, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): AccountFacebook;
    fromJSON(object: any): AccountFacebook;
    toJSON(message: AccountFacebook): unknown;
    fromPartial(object: DeepPartial<AccountFacebook>): AccountFacebook;
};
export declare const AccountFacebook_VarsEntry: {
    encode(message: AccountFacebook_VarsEntry, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): AccountFacebook_VarsEntry;
    fromJSON(object: any): AccountFacebook_VarsEntry;
    toJSON(message: AccountFacebook_VarsEntry): unknown;
    fromPartial(object: DeepPartial<AccountFacebook_VarsEntry>): AccountFacebook_VarsEntry;
};
export declare const AccountFacebookInstantGame: {
    encode(message: AccountFacebookInstantGame, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): AccountFacebookInstantGame;
    fromJSON(object: any): AccountFacebookInstantGame;
    toJSON(message: AccountFacebookInstantGame): unknown;
    fromPartial(object: DeepPartial<AccountFacebookInstantGame>): AccountFacebookInstantGame;
};
export declare const AccountFacebookInstantGame_VarsEntry: {
    encode(message: AccountFacebookInstantGame_VarsEntry, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): AccountFacebookInstantGame_VarsEntry;
    fromJSON(object: any): AccountFacebookInstantGame_VarsEntry;
    toJSON(message: AccountFacebookInstantGame_VarsEntry): unknown;
    fromPartial(object: DeepPartial<AccountFacebookInstantGame_VarsEntry>): AccountFacebookInstantGame_VarsEntry;
};
export declare const AccountGameCenter: {
    encode(message: AccountGameCenter, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): AccountGameCenter;
    fromJSON(object: any): AccountGameCenter;
    toJSON(message: AccountGameCenter): unknown;
    fromPartial(object: DeepPartial<AccountGameCenter>): AccountGameCenter;
};
export declare const AccountGameCenter_VarsEntry: {
    encode(message: AccountGameCenter_VarsEntry, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): AccountGameCenter_VarsEntry;
    fromJSON(object: any): AccountGameCenter_VarsEntry;
    toJSON(message: AccountGameCenter_VarsEntry): unknown;
    fromPartial(object: DeepPartial<AccountGameCenter_VarsEntry>): AccountGameCenter_VarsEntry;
};
export declare const AccountGoogle: {
    encode(message: AccountGoogle, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): AccountGoogle;
    fromJSON(object: any): AccountGoogle;
    toJSON(message: AccountGoogle): unknown;
    fromPartial(object: DeepPartial<AccountGoogle>): AccountGoogle;
};
export declare const AccountGoogle_VarsEntry: {
    encode(message: AccountGoogle_VarsEntry, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): AccountGoogle_VarsEntry;
    fromJSON(object: any): AccountGoogle_VarsEntry;
    toJSON(message: AccountGoogle_VarsEntry): unknown;
    fromPartial(object: DeepPartial<AccountGoogle_VarsEntry>): AccountGoogle_VarsEntry;
};
export declare const AccountSteam: {
    encode(message: AccountSteam, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): AccountSteam;
    fromJSON(object: any): AccountSteam;
    toJSON(message: AccountSteam): unknown;
    fromPartial(object: DeepPartial<AccountSteam>): AccountSteam;
};
export declare const AccountSteam_VarsEntry: {
    encode(message: AccountSteam_VarsEntry, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): AccountSteam_VarsEntry;
    fromJSON(object: any): AccountSteam_VarsEntry;
    toJSON(message: AccountSteam_VarsEntry): unknown;
    fromPartial(object: DeepPartial<AccountSteam_VarsEntry>): AccountSteam_VarsEntry;
};
export declare const AddFriendsRequest: {
    encode(message: AddFriendsRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): AddFriendsRequest;
    fromJSON(object: any): AddFriendsRequest;
    toJSON(message: AddFriendsRequest): unknown;
    fromPartial(object: DeepPartial<AddFriendsRequest>): AddFriendsRequest;
};
export declare const AddGroupUsersRequest: {
    encode(message: AddGroupUsersRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): AddGroupUsersRequest;
    fromJSON(object: any): AddGroupUsersRequest;
    toJSON(message: AddGroupUsersRequest): unknown;
    fromPartial(object: DeepPartial<AddGroupUsersRequest>): AddGroupUsersRequest;
};
export declare const SessionRefreshRequest: {
    encode(message: SessionRefreshRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): SessionRefreshRequest;
    fromJSON(object: any): SessionRefreshRequest;
    toJSON(message: SessionRefreshRequest): unknown;
    fromPartial(object: DeepPartial<SessionRefreshRequest>): SessionRefreshRequest;
};
export declare const SessionRefreshRequest_VarsEntry: {
    encode(message: SessionRefreshRequest_VarsEntry, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): SessionRefreshRequest_VarsEntry;
    fromJSON(object: any): SessionRefreshRequest_VarsEntry;
    toJSON(message: SessionRefreshRequest_VarsEntry): unknown;
    fromPartial(object: DeepPartial<SessionRefreshRequest_VarsEntry>): SessionRefreshRequest_VarsEntry;
};
export declare const SessionLogoutRequest: {
    encode(message: SessionLogoutRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): SessionLogoutRequest;
    fromJSON(object: any): SessionLogoutRequest;
    toJSON(message: SessionLogoutRequest): unknown;
    fromPartial(object: DeepPartial<SessionLogoutRequest>): SessionLogoutRequest;
};
export declare const AuthenticateAppleRequest: {
    encode(message: AuthenticateAppleRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): AuthenticateAppleRequest;
    fromJSON(object: any): AuthenticateAppleRequest;
    toJSON(message: AuthenticateAppleRequest): unknown;
    fromPartial(object: DeepPartial<AuthenticateAppleRequest>): AuthenticateAppleRequest;
};
export declare const AuthenticateCustomRequest: {
    encode(message: AuthenticateCustomRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): AuthenticateCustomRequest;
    fromJSON(object: any): AuthenticateCustomRequest;
    toJSON(message: AuthenticateCustomRequest): unknown;
    fromPartial(object: DeepPartial<AuthenticateCustomRequest>): AuthenticateCustomRequest;
};
export declare const AuthenticateDeviceRequest: {
    encode(message: AuthenticateDeviceRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): AuthenticateDeviceRequest;
    fromJSON(object: any): AuthenticateDeviceRequest;
    toJSON(message: AuthenticateDeviceRequest): unknown;
    fromPartial(object: DeepPartial<AuthenticateDeviceRequest>): AuthenticateDeviceRequest;
};
export declare const AuthenticateEmailRequest: {
    encode(message: AuthenticateEmailRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): AuthenticateEmailRequest;
    fromJSON(object: any): AuthenticateEmailRequest;
    toJSON(message: AuthenticateEmailRequest): unknown;
    fromPartial(object: DeepPartial<AuthenticateEmailRequest>): AuthenticateEmailRequest;
};
export declare const AuthenticateFacebookRequest: {
    encode(message: AuthenticateFacebookRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): AuthenticateFacebookRequest;
    fromJSON(object: any): AuthenticateFacebookRequest;
    toJSON(message: AuthenticateFacebookRequest): unknown;
    fromPartial(object: DeepPartial<AuthenticateFacebookRequest>): AuthenticateFacebookRequest;
};
export declare const AuthenticateFacebookInstantGameRequest: {
    encode(message: AuthenticateFacebookInstantGameRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): AuthenticateFacebookInstantGameRequest;
    fromJSON(object: any): AuthenticateFacebookInstantGameRequest;
    toJSON(message: AuthenticateFacebookInstantGameRequest): unknown;
    fromPartial(object: DeepPartial<AuthenticateFacebookInstantGameRequest>): AuthenticateFacebookInstantGameRequest;
};
export declare const AuthenticateGameCenterRequest: {
    encode(message: AuthenticateGameCenterRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): AuthenticateGameCenterRequest;
    fromJSON(object: any): AuthenticateGameCenterRequest;
    toJSON(message: AuthenticateGameCenterRequest): unknown;
    fromPartial(object: DeepPartial<AuthenticateGameCenterRequest>): AuthenticateGameCenterRequest;
};
export declare const AuthenticateGoogleRequest: {
    encode(message: AuthenticateGoogleRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): AuthenticateGoogleRequest;
    fromJSON(object: any): AuthenticateGoogleRequest;
    toJSON(message: AuthenticateGoogleRequest): unknown;
    fromPartial(object: DeepPartial<AuthenticateGoogleRequest>): AuthenticateGoogleRequest;
};
export declare const AuthenticateSteamRequest: {
    encode(message: AuthenticateSteamRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): AuthenticateSteamRequest;
    fromJSON(object: any): AuthenticateSteamRequest;
    toJSON(message: AuthenticateSteamRequest): unknown;
    fromPartial(object: DeepPartial<AuthenticateSteamRequest>): AuthenticateSteamRequest;
};
export declare const BanGroupUsersRequest: {
    encode(message: BanGroupUsersRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): BanGroupUsersRequest;
    fromJSON(object: any): BanGroupUsersRequest;
    toJSON(message: BanGroupUsersRequest): unknown;
    fromPartial(object: DeepPartial<BanGroupUsersRequest>): BanGroupUsersRequest;
};
export declare const BlockFriendsRequest: {
    encode(message: BlockFriendsRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): BlockFriendsRequest;
    fromJSON(object: any): BlockFriendsRequest;
    toJSON(message: BlockFriendsRequest): unknown;
    fromPartial(object: DeepPartial<BlockFriendsRequest>): BlockFriendsRequest;
};
export declare const ChannelMessage: {
    encode(message: ChannelMessage, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): ChannelMessage;
    fromJSON(object: any): ChannelMessage;
    toJSON(message: ChannelMessage): unknown;
    fromPartial(object: DeepPartial<ChannelMessage>): ChannelMessage;
};
export declare const ChannelMessageList: {
    encode(message: ChannelMessageList, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): ChannelMessageList;
    fromJSON(object: any): ChannelMessageList;
    toJSON(message: ChannelMessageList): unknown;
    fromPartial(object: DeepPartial<ChannelMessageList>): ChannelMessageList;
};
export declare const CreateGroupRequest: {
    encode(message: CreateGroupRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): CreateGroupRequest;
    fromJSON(object: any): CreateGroupRequest;
    toJSON(message: CreateGroupRequest): unknown;
    fromPartial(object: DeepPartial<CreateGroupRequest>): CreateGroupRequest;
};
export declare const DeleteFriendsRequest: {
    encode(message: DeleteFriendsRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): DeleteFriendsRequest;
    fromJSON(object: any): DeleteFriendsRequest;
    toJSON(message: DeleteFriendsRequest): unknown;
    fromPartial(object: DeepPartial<DeleteFriendsRequest>): DeleteFriendsRequest;
};
export declare const DeleteGroupRequest: {
    encode(message: DeleteGroupRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): DeleteGroupRequest;
    fromJSON(object: any): DeleteGroupRequest;
    toJSON(message: DeleteGroupRequest): unknown;
    fromPartial(object: DeepPartial<DeleteGroupRequest>): DeleteGroupRequest;
};
export declare const DeleteLeaderboardRecordRequest: {
    encode(message: DeleteLeaderboardRecordRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): DeleteLeaderboardRecordRequest;
    fromJSON(object: any): DeleteLeaderboardRecordRequest;
    toJSON(message: DeleteLeaderboardRecordRequest): unknown;
    fromPartial(object: DeepPartial<DeleteLeaderboardRecordRequest>): DeleteLeaderboardRecordRequest;
};
export declare const DeleteNotificationsRequest: {
    encode(message: DeleteNotificationsRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): DeleteNotificationsRequest;
    fromJSON(object: any): DeleteNotificationsRequest;
    toJSON(message: DeleteNotificationsRequest): unknown;
    fromPartial(object: DeepPartial<DeleteNotificationsRequest>): DeleteNotificationsRequest;
};
export declare const DeleteStorageObjectId: {
    encode(message: DeleteStorageObjectId, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): DeleteStorageObjectId;
    fromJSON(object: any): DeleteStorageObjectId;
    toJSON(message: DeleteStorageObjectId): unknown;
    fromPartial(object: DeepPartial<DeleteStorageObjectId>): DeleteStorageObjectId;
};
export declare const DeleteStorageObjectsRequest: {
    encode(message: DeleteStorageObjectsRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): DeleteStorageObjectsRequest;
    fromJSON(object: any): DeleteStorageObjectsRequest;
    toJSON(message: DeleteStorageObjectsRequest): unknown;
    fromPartial(object: DeepPartial<DeleteStorageObjectsRequest>): DeleteStorageObjectsRequest;
};
export declare const Event: {
    encode(message: Event, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): Event;
    fromJSON(object: any): Event;
    toJSON(message: Event): unknown;
    fromPartial(object: DeepPartial<Event>): Event;
};
export declare const Event_PropertiesEntry: {
    encode(message: Event_PropertiesEntry, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): Event_PropertiesEntry;
    fromJSON(object: any): Event_PropertiesEntry;
    toJSON(message: Event_PropertiesEntry): unknown;
    fromPartial(object: DeepPartial<Event_PropertiesEntry>): Event_PropertiesEntry;
};
export declare const Friend: {
    encode(message: Friend, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): Friend;
    fromJSON(object: any): Friend;
    toJSON(message: Friend): unknown;
    fromPartial(object: DeepPartial<Friend>): Friend;
};
export declare const FriendList: {
    encode(message: FriendList, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): FriendList;
    fromJSON(object: any): FriendList;
    toJSON(message: FriendList): unknown;
    fromPartial(object: DeepPartial<FriendList>): FriendList;
};
export declare const GetUsersRequest: {
    encode(message: GetUsersRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): GetUsersRequest;
    fromJSON(object: any): GetUsersRequest;
    toJSON(message: GetUsersRequest): unknown;
    fromPartial(object: DeepPartial<GetUsersRequest>): GetUsersRequest;
};
export declare const Group: {
    encode(message: Group, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): Group;
    fromJSON(object: any): Group;
    toJSON(message: Group): unknown;
    fromPartial(object: DeepPartial<Group>): Group;
};
export declare const GroupList: {
    encode(message: GroupList, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): GroupList;
    fromJSON(object: any): GroupList;
    toJSON(message: GroupList): unknown;
    fromPartial(object: DeepPartial<GroupList>): GroupList;
};
export declare const GroupUserList: {
    encode(message: GroupUserList, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): GroupUserList;
    fromJSON(object: any): GroupUserList;
    toJSON(message: GroupUserList): unknown;
    fromPartial(object: DeepPartial<GroupUserList>): GroupUserList;
};
export declare const GroupUserList_GroupUser: {
    encode(message: GroupUserList_GroupUser, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): GroupUserList_GroupUser;
    fromJSON(object: any): GroupUserList_GroupUser;
    toJSON(message: GroupUserList_GroupUser): unknown;
    fromPartial(object: DeepPartial<GroupUserList_GroupUser>): GroupUserList_GroupUser;
};
export declare const ImportFacebookFriendsRequest: {
    encode(message: ImportFacebookFriendsRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): ImportFacebookFriendsRequest;
    fromJSON(object: any): ImportFacebookFriendsRequest;
    toJSON(message: ImportFacebookFriendsRequest): unknown;
    fromPartial(object: DeepPartial<ImportFacebookFriendsRequest>): ImportFacebookFriendsRequest;
};
export declare const ImportSteamFriendsRequest: {
    encode(message: ImportSteamFriendsRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): ImportSteamFriendsRequest;
    fromJSON(object: any): ImportSteamFriendsRequest;
    toJSON(message: ImportSteamFriendsRequest): unknown;
    fromPartial(object: DeepPartial<ImportSteamFriendsRequest>): ImportSteamFriendsRequest;
};
export declare const JoinGroupRequest: {
    encode(message: JoinGroupRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): JoinGroupRequest;
    fromJSON(object: any): JoinGroupRequest;
    toJSON(message: JoinGroupRequest): unknown;
    fromPartial(object: DeepPartial<JoinGroupRequest>): JoinGroupRequest;
};
export declare const JoinTournamentRequest: {
    encode(message: JoinTournamentRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): JoinTournamentRequest;
    fromJSON(object: any): JoinTournamentRequest;
    toJSON(message: JoinTournamentRequest): unknown;
    fromPartial(object: DeepPartial<JoinTournamentRequest>): JoinTournamentRequest;
};
export declare const KickGroupUsersRequest: {
    encode(message: KickGroupUsersRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): KickGroupUsersRequest;
    fromJSON(object: any): KickGroupUsersRequest;
    toJSON(message: KickGroupUsersRequest): unknown;
    fromPartial(object: DeepPartial<KickGroupUsersRequest>): KickGroupUsersRequest;
};
export declare const Leaderboard: {
    encode(message: Leaderboard, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): Leaderboard;
    fromJSON(object: any): Leaderboard;
    toJSON(message: Leaderboard): unknown;
    fromPartial(object: DeepPartial<Leaderboard>): Leaderboard;
};
export declare const LeaderboardList: {
    encode(message: LeaderboardList, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): LeaderboardList;
    fromJSON(object: any): LeaderboardList;
    toJSON(message: LeaderboardList): unknown;
    fromPartial(object: DeepPartial<LeaderboardList>): LeaderboardList;
};
export declare const LeaderboardRecord: {
    encode(message: LeaderboardRecord, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): LeaderboardRecord;
    fromJSON(object: any): LeaderboardRecord;
    toJSON(message: LeaderboardRecord): unknown;
    fromPartial(object: DeepPartial<LeaderboardRecord>): LeaderboardRecord;
};
export declare const LeaderboardRecordList: {
    encode(message: LeaderboardRecordList, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): LeaderboardRecordList;
    fromJSON(object: any): LeaderboardRecordList;
    toJSON(message: LeaderboardRecordList): unknown;
    fromPartial(object: DeepPartial<LeaderboardRecordList>): LeaderboardRecordList;
};
export declare const LeaveGroupRequest: {
    encode(message: LeaveGroupRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): LeaveGroupRequest;
    fromJSON(object: any): LeaveGroupRequest;
    toJSON(message: LeaveGroupRequest): unknown;
    fromPartial(object: DeepPartial<LeaveGroupRequest>): LeaveGroupRequest;
};
export declare const LinkFacebookRequest: {
    encode(message: LinkFacebookRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): LinkFacebookRequest;
    fromJSON(object: any): LinkFacebookRequest;
    toJSON(message: LinkFacebookRequest): unknown;
    fromPartial(object: DeepPartial<LinkFacebookRequest>): LinkFacebookRequest;
};
export declare const LinkSteamRequest: {
    encode(message: LinkSteamRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): LinkSteamRequest;
    fromJSON(object: any): LinkSteamRequest;
    toJSON(message: LinkSteamRequest): unknown;
    fromPartial(object: DeepPartial<LinkSteamRequest>): LinkSteamRequest;
};
export declare const ListChannelMessagesRequest: {
    encode(message: ListChannelMessagesRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): ListChannelMessagesRequest;
    fromJSON(object: any): ListChannelMessagesRequest;
    toJSON(message: ListChannelMessagesRequest): unknown;
    fromPartial(object: DeepPartial<ListChannelMessagesRequest>): ListChannelMessagesRequest;
};
export declare const ListFriendsRequest: {
    encode(message: ListFriendsRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): ListFriendsRequest;
    fromJSON(object: any): ListFriendsRequest;
    toJSON(message: ListFriendsRequest): unknown;
    fromPartial(object: DeepPartial<ListFriendsRequest>): ListFriendsRequest;
};
export declare const ListGroupsRequest: {
    encode(message: ListGroupsRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): ListGroupsRequest;
    fromJSON(object: any): ListGroupsRequest;
    toJSON(message: ListGroupsRequest): unknown;
    fromPartial(object: DeepPartial<ListGroupsRequest>): ListGroupsRequest;
};
export declare const ListGroupUsersRequest: {
    encode(message: ListGroupUsersRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): ListGroupUsersRequest;
    fromJSON(object: any): ListGroupUsersRequest;
    toJSON(message: ListGroupUsersRequest): unknown;
    fromPartial(object: DeepPartial<ListGroupUsersRequest>): ListGroupUsersRequest;
};
export declare const ListLeaderboardRecordsAroundOwnerRequest: {
    encode(message: ListLeaderboardRecordsAroundOwnerRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): ListLeaderboardRecordsAroundOwnerRequest;
    fromJSON(object: any): ListLeaderboardRecordsAroundOwnerRequest;
    toJSON(message: ListLeaderboardRecordsAroundOwnerRequest): unknown;
    fromPartial(object: DeepPartial<ListLeaderboardRecordsAroundOwnerRequest>): ListLeaderboardRecordsAroundOwnerRequest;
};
export declare const ListLeaderboardRecordsRequest: {
    encode(message: ListLeaderboardRecordsRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): ListLeaderboardRecordsRequest;
    fromJSON(object: any): ListLeaderboardRecordsRequest;
    toJSON(message: ListLeaderboardRecordsRequest): unknown;
    fromPartial(object: DeepPartial<ListLeaderboardRecordsRequest>): ListLeaderboardRecordsRequest;
};
export declare const ListMatchesRequest: {
    encode(message: ListMatchesRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): ListMatchesRequest;
    fromJSON(object: any): ListMatchesRequest;
    toJSON(message: ListMatchesRequest): unknown;
    fromPartial(object: DeepPartial<ListMatchesRequest>): ListMatchesRequest;
};
export declare const ListNotificationsRequest: {
    encode(message: ListNotificationsRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): ListNotificationsRequest;
    fromJSON(object: any): ListNotificationsRequest;
    toJSON(message: ListNotificationsRequest): unknown;
    fromPartial(object: DeepPartial<ListNotificationsRequest>): ListNotificationsRequest;
};
export declare const ListStorageObjectsRequest: {
    encode(message: ListStorageObjectsRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): ListStorageObjectsRequest;
    fromJSON(object: any): ListStorageObjectsRequest;
    toJSON(message: ListStorageObjectsRequest): unknown;
    fromPartial(object: DeepPartial<ListStorageObjectsRequest>): ListStorageObjectsRequest;
};
export declare const ListTournamentRecordsAroundOwnerRequest: {
    encode(message: ListTournamentRecordsAroundOwnerRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): ListTournamentRecordsAroundOwnerRequest;
    fromJSON(object: any): ListTournamentRecordsAroundOwnerRequest;
    toJSON(message: ListTournamentRecordsAroundOwnerRequest): unknown;
    fromPartial(object: DeepPartial<ListTournamentRecordsAroundOwnerRequest>): ListTournamentRecordsAroundOwnerRequest;
};
export declare const ListTournamentRecordsRequest: {
    encode(message: ListTournamentRecordsRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): ListTournamentRecordsRequest;
    fromJSON(object: any): ListTournamentRecordsRequest;
    toJSON(message: ListTournamentRecordsRequest): unknown;
    fromPartial(object: DeepPartial<ListTournamentRecordsRequest>): ListTournamentRecordsRequest;
};
export declare const ListTournamentsRequest: {
    encode(message: ListTournamentsRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): ListTournamentsRequest;
    fromJSON(object: any): ListTournamentsRequest;
    toJSON(message: ListTournamentsRequest): unknown;
    fromPartial(object: DeepPartial<ListTournamentsRequest>): ListTournamentsRequest;
};
export declare const ListUserGroupsRequest: {
    encode(message: ListUserGroupsRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): ListUserGroupsRequest;
    fromJSON(object: any): ListUserGroupsRequest;
    toJSON(message: ListUserGroupsRequest): unknown;
    fromPartial(object: DeepPartial<ListUserGroupsRequest>): ListUserGroupsRequest;
};
export declare const Match: {
    encode(message: Match, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): Match;
    fromJSON(object: any): Match;
    toJSON(message: Match): unknown;
    fromPartial(object: DeepPartial<Match>): Match;
};
export declare const MatchList: {
    encode(message: MatchList, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): MatchList;
    fromJSON(object: any): MatchList;
    toJSON(message: MatchList): unknown;
    fromPartial(object: DeepPartial<MatchList>): MatchList;
};
export declare const Notification: {
    encode(message: Notification, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): Notification;
    fromJSON(object: any): Notification;
    toJSON(message: Notification): unknown;
    fromPartial(object: DeepPartial<Notification>): Notification;
};
export declare const NotificationList: {
    encode(message: NotificationList, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): NotificationList;
    fromJSON(object: any): NotificationList;
    toJSON(message: NotificationList): unknown;
    fromPartial(object: DeepPartial<NotificationList>): NotificationList;
};
export declare const PromoteGroupUsersRequest: {
    encode(message: PromoteGroupUsersRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): PromoteGroupUsersRequest;
    fromJSON(object: any): PromoteGroupUsersRequest;
    toJSON(message: PromoteGroupUsersRequest): unknown;
    fromPartial(object: DeepPartial<PromoteGroupUsersRequest>): PromoteGroupUsersRequest;
};
export declare const DemoteGroupUsersRequest: {
    encode(message: DemoteGroupUsersRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): DemoteGroupUsersRequest;
    fromJSON(object: any): DemoteGroupUsersRequest;
    toJSON(message: DemoteGroupUsersRequest): unknown;
    fromPartial(object: DeepPartial<DemoteGroupUsersRequest>): DemoteGroupUsersRequest;
};
export declare const ReadStorageObjectId: {
    encode(message: ReadStorageObjectId, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): ReadStorageObjectId;
    fromJSON(object: any): ReadStorageObjectId;
    toJSON(message: ReadStorageObjectId): unknown;
    fromPartial(object: DeepPartial<ReadStorageObjectId>): ReadStorageObjectId;
};
export declare const ReadStorageObjectsRequest: {
    encode(message: ReadStorageObjectsRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): ReadStorageObjectsRequest;
    fromJSON(object: any): ReadStorageObjectsRequest;
    toJSON(message: ReadStorageObjectsRequest): unknown;
    fromPartial(object: DeepPartial<ReadStorageObjectsRequest>): ReadStorageObjectsRequest;
};
export declare const Rpc: {
    encode(message: Rpc, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): Rpc;
    fromJSON(object: any): Rpc;
    toJSON(message: Rpc): unknown;
    fromPartial(object: DeepPartial<Rpc>): Rpc;
};
export declare const Session: {
    encode(message: Session, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): Session;
    fromJSON(object: any): Session;
    toJSON(message: Session): unknown;
    fromPartial(object: DeepPartial<Session>): Session;
};
export declare const StorageObject: {
    encode(message: StorageObject, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): StorageObject;
    fromJSON(object: any): StorageObject;
    toJSON(message: StorageObject): unknown;
    fromPartial(object: DeepPartial<StorageObject>): StorageObject;
};
export declare const StorageObjectAck: {
    encode(message: StorageObjectAck, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): StorageObjectAck;
    fromJSON(object: any): StorageObjectAck;
    toJSON(message: StorageObjectAck): unknown;
    fromPartial(object: DeepPartial<StorageObjectAck>): StorageObjectAck;
};
export declare const StorageObjectAcks: {
    encode(message: StorageObjectAcks, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): StorageObjectAcks;
    fromJSON(object: any): StorageObjectAcks;
    toJSON(message: StorageObjectAcks): unknown;
    fromPartial(object: DeepPartial<StorageObjectAcks>): StorageObjectAcks;
};
export declare const StorageObjects: {
    encode(message: StorageObjects, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): StorageObjects;
    fromJSON(object: any): StorageObjects;
    toJSON(message: StorageObjects): unknown;
    fromPartial(object: DeepPartial<StorageObjects>): StorageObjects;
};
export declare const StorageObjectList: {
    encode(message: StorageObjectList, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): StorageObjectList;
    fromJSON(object: any): StorageObjectList;
    toJSON(message: StorageObjectList): unknown;
    fromPartial(object: DeepPartial<StorageObjectList>): StorageObjectList;
};
export declare const Tournament: {
    encode(message: Tournament, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): Tournament;
    fromJSON(object: any): Tournament;
    toJSON(message: Tournament): unknown;
    fromPartial(object: DeepPartial<Tournament>): Tournament;
};
export declare const TournamentList: {
    encode(message: TournamentList, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): TournamentList;
    fromJSON(object: any): TournamentList;
    toJSON(message: TournamentList): unknown;
    fromPartial(object: DeepPartial<TournamentList>): TournamentList;
};
export declare const TournamentRecordList: {
    encode(message: TournamentRecordList, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): TournamentRecordList;
    fromJSON(object: any): TournamentRecordList;
    toJSON(message: TournamentRecordList): unknown;
    fromPartial(object: DeepPartial<TournamentRecordList>): TournamentRecordList;
};
export declare const UpdateAccountRequest: {
    encode(message: UpdateAccountRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): UpdateAccountRequest;
    fromJSON(object: any): UpdateAccountRequest;
    toJSON(message: UpdateAccountRequest): unknown;
    fromPartial(object: DeepPartial<UpdateAccountRequest>): UpdateAccountRequest;
};
export declare const UpdateGroupRequest: {
    encode(message: UpdateGroupRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): UpdateGroupRequest;
    fromJSON(object: any): UpdateGroupRequest;
    toJSON(message: UpdateGroupRequest): unknown;
    fromPartial(object: DeepPartial<UpdateGroupRequest>): UpdateGroupRequest;
};
export declare const User: {
    encode(message: User, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): User;
    fromJSON(object: any): User;
    toJSON(message: User): unknown;
    fromPartial(object: DeepPartial<User>): User;
};
export declare const UserGroupList: {
    encode(message: UserGroupList, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): UserGroupList;
    fromJSON(object: any): UserGroupList;
    toJSON(message: UserGroupList): unknown;
    fromPartial(object: DeepPartial<UserGroupList>): UserGroupList;
};
export declare const UserGroupList_UserGroup: {
    encode(message: UserGroupList_UserGroup, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): UserGroupList_UserGroup;
    fromJSON(object: any): UserGroupList_UserGroup;
    toJSON(message: UserGroupList_UserGroup): unknown;
    fromPartial(object: DeepPartial<UserGroupList_UserGroup>): UserGroupList_UserGroup;
};
export declare const Users: {
    encode(message: Users, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): Users;
    fromJSON(object: any): Users;
    toJSON(message: Users): unknown;
    fromPartial(object: DeepPartial<Users>): Users;
};
export declare const ValidatePurchaseAppleRequest: {
    encode(message: ValidatePurchaseAppleRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): ValidatePurchaseAppleRequest;
    fromJSON(object: any): ValidatePurchaseAppleRequest;
    toJSON(message: ValidatePurchaseAppleRequest): unknown;
    fromPartial(object: DeepPartial<ValidatePurchaseAppleRequest>): ValidatePurchaseAppleRequest;
};
export declare const ValidatePurchaseGoogleRequest: {
    encode(message: ValidatePurchaseGoogleRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): ValidatePurchaseGoogleRequest;
    fromJSON(object: any): ValidatePurchaseGoogleRequest;
    toJSON(message: ValidatePurchaseGoogleRequest): unknown;
    fromPartial(object: DeepPartial<ValidatePurchaseGoogleRequest>): ValidatePurchaseGoogleRequest;
};
export declare const ValidatePurchaseHuaweiRequest: {
    encode(message: ValidatePurchaseHuaweiRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): ValidatePurchaseHuaweiRequest;
    fromJSON(object: any): ValidatePurchaseHuaweiRequest;
    toJSON(message: ValidatePurchaseHuaweiRequest): unknown;
    fromPartial(object: DeepPartial<ValidatePurchaseHuaweiRequest>): ValidatePurchaseHuaweiRequest;
};
export declare const ValidatedPurchase: {
    encode(message: ValidatedPurchase, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): ValidatedPurchase;
    fromJSON(object: any): ValidatedPurchase;
    toJSON(message: ValidatedPurchase): unknown;
    fromPartial(object: DeepPartial<ValidatedPurchase>): ValidatedPurchase;
};
export declare const ValidatePurchaseResponse: {
    encode(message: ValidatePurchaseResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): ValidatePurchaseResponse;
    fromJSON(object: any): ValidatePurchaseResponse;
    toJSON(message: ValidatePurchaseResponse): unknown;
    fromPartial(object: DeepPartial<ValidatePurchaseResponse>): ValidatePurchaseResponse;
};
export declare const PurchaseList: {
    encode(message: PurchaseList, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): PurchaseList;
    fromJSON(object: any): PurchaseList;
    toJSON(message: PurchaseList): unknown;
    fromPartial(object: DeepPartial<PurchaseList>): PurchaseList;
};
export declare const WriteLeaderboardRecordRequest: {
    encode(message: WriteLeaderboardRecordRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): WriteLeaderboardRecordRequest;
    fromJSON(object: any): WriteLeaderboardRecordRequest;
    toJSON(message: WriteLeaderboardRecordRequest): unknown;
    fromPartial(object: DeepPartial<WriteLeaderboardRecordRequest>): WriteLeaderboardRecordRequest;
};
export declare const WriteLeaderboardRecordRequest_LeaderboardRecordWrite: {
    encode(message: WriteLeaderboardRecordRequest_LeaderboardRecordWrite, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): WriteLeaderboardRecordRequest_LeaderboardRecordWrite;
    fromJSON(object: any): WriteLeaderboardRecordRequest_LeaderboardRecordWrite;
    toJSON(message: WriteLeaderboardRecordRequest_LeaderboardRecordWrite): unknown;
    fromPartial(object: DeepPartial<WriteLeaderboardRecordRequest_LeaderboardRecordWrite>): WriteLeaderboardRecordRequest_LeaderboardRecordWrite;
};
export declare const WriteStorageObject: {
    encode(message: WriteStorageObject, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): WriteStorageObject;
    fromJSON(object: any): WriteStorageObject;
    toJSON(message: WriteStorageObject): unknown;
    fromPartial(object: DeepPartial<WriteStorageObject>): WriteStorageObject;
};
export declare const WriteStorageObjectsRequest: {
    encode(message: WriteStorageObjectsRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): WriteStorageObjectsRequest;
    fromJSON(object: any): WriteStorageObjectsRequest;
    toJSON(message: WriteStorageObjectsRequest): unknown;
    fromPartial(object: DeepPartial<WriteStorageObjectsRequest>): WriteStorageObjectsRequest;
};
export declare const WriteTournamentRecordRequest: {
    encode(message: WriteTournamentRecordRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): WriteTournamentRecordRequest;
    fromJSON(object: any): WriteTournamentRecordRequest;
    toJSON(message: WriteTournamentRecordRequest): unknown;
    fromPartial(object: DeepPartial<WriteTournamentRecordRequest>): WriteTournamentRecordRequest;
};
export declare const WriteTournamentRecordRequest_TournamentRecordWrite: {
    encode(message: WriteTournamentRecordRequest_TournamentRecordWrite, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): WriteTournamentRecordRequest_TournamentRecordWrite;
    fromJSON(object: any): WriteTournamentRecordRequest_TournamentRecordWrite;
    toJSON(message: WriteTournamentRecordRequest_TournamentRecordWrite): unknown;
    fromPartial(object: DeepPartial<WriteTournamentRecordRequest_TournamentRecordWrite>): WriteTournamentRecordRequest_TournamentRecordWrite;
};
type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;
export type DeepPartial<T> = T extends Builtin ? T : T extends Array<infer U> ? Array<DeepPartial<U>> : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>> : T extends {} ? {
    [K in keyof T]?: DeepPartial<T[K]>;
} : Partial<T>;
export {};
